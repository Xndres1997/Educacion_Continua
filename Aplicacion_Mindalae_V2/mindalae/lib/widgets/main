void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: RadioPlayerScreen(),
    );
  }
}

class RadioPlayerScreen extends StatefulWidget {
  const RadioPlayerScreen({super.key});

  @override
  State<RadioPlayerScreen> createState() => _RadioPlayerScreenState();
}

class _RadioPlayerScreenState extends State<RadioPlayerScreen>
    with SingleTickerProviderStateMixin {
  final AudioPlayer _audioPlayer = AudioPlayer();
  //Volumen
  double _volume = 0.5;
  late VolumeController _volumeController;
  bool isPlaying = false;

  final String streamUrl = 'https://grupomundodigital.com:8646/stream';
  late AnimationController _animationController;

  int _selectedIndex = 0;

  void _onIconPressed(int index) {
    setState(() {
      _selectedIndex = index;

      if (index == 1) {
        // Ir a la pantalla de TV
        Navigator.push(
          context,
          MaterialPageRoute(
            builder:
                (context) => const TvPlayerScreen(
                  streamUrl:
                      'https://vid2.ecuamedia.net/upectv/Stream1/playlist.m3u8',
                ),
          ),
        );
      } else if (index == 2) {
        // Ir a la pantalla de Programas
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const ProgramasScreen()),
        );
      }
    });
  }

  /*@override
  void initState() {
    super.initState();
    _audioPlayer.setVolume(_volume);
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 600),
    )..repeat(reverse: true);
    _animationController.stop(); // Que no empiece hasta darle play
  } */

  @override
  void initState() {
    super.initState();

    _volumeController = VolumeController();

    _volumeController.listener((newVolume) {
      _audioPlayer.setVolume(newVolume);
      setState(() {
        _volume = newVolume;
      });
    });

    _volumeController.getVolume().then((vol) {
      _audioPlayer.setVolume(vol);
      setState(() {
        _volume = vol;
      });
    });

    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 600),
    )..stop();
  }

  @override
  void dispose() {
    _volumeController.removeListener();
    _audioPlayer.dispose();
    _animationController.dispose();
    super.dispose();
  }

  void _togglePlay() async {
    if (isPlaying) {
      await _audioPlayer.pause();
      _animationController.stop();
    } else {
      await _audioPlayer.play(UrlSource(streamUrl));
      _animationController.repeat(reverse: true);
    }
    setState(() {
      isPlaying = !isPlaying;
    });
  }

  //Control del Volumen de la pantalla
  void _setVolume(double value) {
    _volumeController.setVolume(value);
    _audioPlayer.setVolume(value);
    setState(() {
      _volume = value;
    });
  }

  //Subir Volumen con icono
  void _increaseVolume() {
    double newVolume = (_volume + 0.1).clamp(0.0, 1.0);
    _setVolume(newVolume);
  }

  //Bjar  Volumen con icono
  void _decreaseVolume() {
    double newVolume = (_volume - 0.1).clamp(0.0, 1.0);
    _setVolume(newVolume);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 157, 157, 156),
      appBar: AppBar(
        centerTitle: true,
        title: const Text(
          'MINDALAE',
          style: TextStyle(
            color: Color.fromRGBO(0, 0, 0, 1),
            fontWeight: FontWeight.bold,
            fontSize: 24,
          ),
        ),

        backgroundColor: const Color.fromARGB(255, 157, 157, 156),
        leading: IconButton(
          icon: const Icon(
            Icons.menu_rounded,
            color: Color.fromRGBO(255, 206, 0, 1),
            size: 35,
          ),
          onPressed: () {},
        ),
        actions: [
          IconButton(
            icon: const Icon(
              Icons.person_add_alt_1_rounded,
              color: Color.fromRGBO(255, 206, 0, 1),
              size: 35,
            ),
            onPressed: () {},
          ),
        ],
        elevation: 0,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Column(
            children: [
              const SizedBox(height: 0),

              // üßë‚Äçüé§ T√≠tulo
              const Text(
                'RADIO ONLINE',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Color.fromRGBO(255, 206, 0, 1),
                  letterSpacing: 0,
                ),
              ),

              const SizedBox(height: 20),

              // üì∑ Logo normal (sin marca de agua)
              SizedBox(
                width: 205,
                height: 205,
                child: Image.asset('assets/logo1.png', fit: BoxFit.contain),
              ),

              const SizedBox(height: 10),

              // üéõÔ∏è Solo Ecualizador
              SizedBox(
                width: 200,
                height: 200,
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, child) {
                    return CustomPaint(
                      painter: EqualizerPainter(_animationController.value),
                    );
                  },
                ),
              ),
              // üîä Control de volumen
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 32.0),
                child: Row(
                  children: [
                    IconButton(
                      icon: const Icon(
                        Icons.volume_down,
                        color: Color.fromRGBO(255, 206, 0, 1),
                        size: 40,
                      ),
                      onPressed: _decreaseVolume, // aqu√≠ s√≠ va
                    ),
                    Expanded(
                      child: Slider(
                        value: _volume,
                        onChanged: _setVolume,
                        min: 0,
                        max: 1,
                        activeColor: Color.fromRGBO(
                          255,
                          206,
                          0,
                          1,
                        ), // Cambia el color de la parte activa
                        inactiveColor: const Color.fromARGB(
                          255,
                          12,
                          0,
                          0,
                        ), // Cambia el color de la parte inactiva
                      ),
                    ),
                    IconButton(
                      icon: const Icon(
                        Icons.volume_up,
                        color: const Color.fromRGBO(255, 206, 0, 1),
                        size: 40,
                      ),
                      onPressed: _increaseVolume,
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // üéµ Bot√≥n de play/pausa
              IconButton(
                icon: Icon(
                  isPlaying
                      ? Icons.pause_circle_filled
                      : Icons.play_circle_fill,
                  size: 80,
                  color: const Color.fromRGBO(255, 206, 0, 1),
                  shadows: [
                    Shadow(
                      offset: Offset(2, 2),
                      blurRadius: 6,
                      color: const Color.fromARGB(
                        255,
                        95,
                        89,
                        6,
                      ).withOpacity(0.5), // sombra oscura
                    ),
                    Shadow(
                      offset: Offset(-1, -1),
                      blurRadius: 1,
                      color: const Color.fromARGB(
                        255,
                        254,
                        255,
                        245,
                      ).withOpacity(0.2), // relieve claro sutil
                    ),
                  ],
                ),
                onPressed: _togglePlay,
              ),
            ],
          ),
        ],
      ),
      //    barra de botones inferiores
      bottomNavigationBar: BarraInferior(
        selectedIndex: _selectedIndex,
        onIconPressed: _onIconPressed,
      ),
    );
  }
}
